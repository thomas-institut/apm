/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/entity/{tid}/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the entity data for the given entity ID */
        get: operations["fd64be920d5fd37a4a8509286bcb8e47"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Entity Data */
        EntityData: {
            /** @description Entity id */
            id: number;
            /** @description The entity's type */
            type: number;
            /** @description The entity's name */
            name: string;
            /** @description Statements in which the entity appears as a subject. */
            statements: components["schemas"]["StatementData"][];
            /** @description $statementsAsObject */
            statementsAsObject: components["schemas"]["StatementData"][];
            /** @description If the entity is merged, the non-merged entity into which this entity resolves. Null otherwise */
            mergedInto: number | null;
        };
        StatementData: {
            id: number;
            subject: number;
            predicate: number;
            /** @description The object of the statement: an entity id or a literal value. */
            object: string | number;
            statementMetadata: unknown[];
            cancellationId: number;
            cancellationMetadata: unknown[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaEntityData = components['schemas']['EntityData'];
export type SchemaStatementData = components['schemas']['StatementData'];
export type $defs = Record<string, never>;
export interface operations {
    fd64be920d5fd37a4a8509286bcb8e47: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityData"];
                };
            };
            /** @description Entity not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
