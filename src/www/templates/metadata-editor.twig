{% extends "base.twig" %}

{% block extraJS %}
    <script type="application/javascript" src="{{baseurl}}/js/dist/MetadataEditor.bundle.js"></script>

    <script>
        let mde = new MetadataEditor()
    </script>
{% endblock %}


{% block title %}Metadata Editor{% endblock %}

{% block content %}
    <h1>Metadata Editor</h1>

    <table class="dataTable" id="metadataTable"></table>
    <br>
    <div id="buttons"></div>
    <br>
    <div id="errorMessage"></div>
    <br>

{% endblock %}

{% block finalBodyJS %}
    <script>

        // Globals
        let entity = {id: '', type: '', attributes: [], values: [], types: []}
        let schemes = {types: [], attributes: [], placeholders: []}
        let numAttributes = 0
        let newId
        let notfirstquery = false
        let state = {create: 'c', edit: 'e'}

        // Selectors
        let thead = $('#tableHead')
        let tbody = $('#tableBody')
        let entity_id_cell = $('#entity_id')
        let entity_type_cell = $('#entity_type')
        let buttons =  $('#buttons')

        // Api urls
        let urlGen = new ApmUrlGenerator('')
        const apiUrls = {
            getData: urlGen.apiMetadataEditorGetData(),
            saveData: urlGen.apiMetadataEditorSaveData(),
            createEntity: urlGen.apiMetadataEditorCreateEntity(),
            getIdForNewEntity: urlGen.apiMetadataEditorGetIdForNewEntity(),
            getDataSchemesForEntityTypes: urlGen.apiMetadataEditorGetDataSchemesForEntityTypes()
        };

        // Setup get and create button as initial state of the metadata editor
        setupGetAndCreateButton()

        // FUNCTIONS
        // Buttons
        function clearButtons() {
            buttons.empty()
        }
        
        function setupGetAndCreateButton() {
            buttons.append
            (`<button type="button" id="get_button" name="Get" style="background-color: white; padding: unset">Get Metadata</button>
              <button type="button" id="create_button" name="Create" style="background-color: white; padding: unset">Create New Entity</button>`)

            makeGetButtonEvent()
            makeCreateButtonEvent()
        }

        function setupGetEditAndCreateButton () {
            buttons.append
            (`<button type="button" id="get_button" name="Get" style="background-color: white; padding: unset">Get Metadata</button>
                <button type="button" id="edit_button" name="Edit" style="background-color: white; padding: unset">Edit Metadata</button>
                <button type="button" id="create_button" name="Create" style="background-color: white; padding: unset">Create New Entity</button>`)

            makeGetButtonEvent()
            makeEditButtonEvent()
            makeCreateButtonEvent()
        }

        function setupSaveAndCancelButton (mode) {
            buttons.append(
                `<button type="button" id="save_button" name="Save" style="background-color: white; padding: unset">Save Metadata</button>
                 <button type="button" id="cancel_button" name="Save" style="background-color: white; padding: unset">Cancel</button>`)

            makeSaveButtonEvent(mode)
            makeCancelButtonEvent(mode)
        }

        function makeGetButtonEvent () {
            $("#get_button").on("click", function () {
                clearButtons()
                clearEntityData()
                getMetadataByEntityId(5, function() {
                    makeTable()
                    showMetadata()
                    setupGetEditAndCreateButton()
                    console.log(`Metadata for entity with ID ${entity.id} are being displayed.`)
                })
            })
        }

        function makeCreateButtonEvent() {
            $("#create_button").on("click", function () {
                clearButtons()
                clearIdCell()
                setupTableForDataInput(state.create, function() {
                    setupSaveAndCancelButton(state.create)
                    console.log('Metadata for new entity can now be set.')
                })
            })
        }

        function makeEditButtonEvent () {
            $("#edit_button").on("click", function () {
                clearButtons()
                setupTableForDataInput(state.edit, function() {
                    setupSaveAndCancelButton(state.edit)
                    console.log(`Metadata for entity with ID ${entity.id} can now be edited.`)
                })
            })
        }

        function makeSaveButtonEvent (mode) {
            $("#save_button").on("click", function () {

                // Get Data To Save
                d = getEntityDataToSave(mode)

                if (dataTypesAreCorrect(d)) {
                    // Make Api Call
                    if (mode === state.edit) {
                        saveMetadata(d.id, d.type, d.values)
                    }
                    else {
                        createEntity(d.id, d.type, d.values)
                    }

                    updateEntityData(d.id, d.type, d.values)
                    showMetadata()
                    clearButtons()
                    clearErrorMessage()
                    setupGetEditAndCreateButton()
                }
                else {
                    returnDataTypeError()
                }
            })
        }

        function makeCancelButtonEvent (mode) {
            $("#cancel_button").on("click", function () {
                clearButtons()
                clearErrorMessage()
                clearTableCells()
                removeTableRows()
                if (mode === state.create) {
                    clearEntityData()
                    setupGetAndCreateButton()
                    console.log('Creation of new entity was canceled.')
                }
                else {
                    makeTable()
                    showMetadata()
                    setupGetEditAndCreateButton()
                    console.log(`Editing of entity with ID ${entity.id} was canceled.`)
                }
            })
        }

        // Table Manipulation
        function makeTable() {
            
            removeTableRowsIfNotFirstQuery()
            makeTableHeadAndBody()
            appendCellsToTable()

            // Get Selectors for id and type cell
            entity_id_cell = $('#entity_id')
            entity_type_cell = $('#entity_type')
        }

        function makeTableHeadAndBody() {
            $('#metadataTable').append(`<tr id="tableHead"></tr><tr id="tableBody"></tr>`)
            thead = $('#tableHead')
            tbody = $('#tableBody')
        }
        
        function appendCellsToTable () {
            thead.append(`
                <th>Entity ID</th>
                <th>Type</th>`)

            tbody.append(`
                <td>
                    <div id="entity_id">
                        -
                    </div>
                </td>
                <td>
                    <div id="entity_type">
                        -
                    </div>
                </td>`)

            for (let i=1; i<=numAttributes; i++) {

                let id = "entity_attr" + i

                thead.append(`<th>${entity.attributes[i-1]}</th>`)

                tbody.append(`
                    <td>
                        <div id=${id}>
                           -
                        </div>
                    </td>`)
            }
        }
        
        function showMetadata () {
            clearTableCells()
            entity_id_cell.append(entity.id)
            entity_type_cell.append(entity.type)
            for (let i=1; i<=numAttributes; i++) {
                let id = "#entity_attr" + i
                $(id).append(entity.values[i-1])
            }
        }

        function clearTableCells() {
            clearIdCell()
            entity_type_cell.empty()
            for (let i=1; i<=numAttributes; i++) {
                let id = "#entity_attr" + i
                $(id).empty()
            }
        }
        
        function setupTableForDataInput(mode, callback) {

            if (mode === state.create) {
                clearTableCells()
                removeTableRows()
                getDataSchemesForEntityTypes(function() {
                    makeEntityFitToTypeSchema()
                    makeTable()
                    getIdForNewEntity(function () {
                        showNewId()
                    })
                    setupTypeSelector()
                    setupSelectorOptions()
                    setupAttributesForms()
                    callback()
                })
            }
            else {
                setupAttributesForms()
                fillAttributesFormsWithValues()
                callback()
            }
        }

        function setupAttributesForms() {
            for (let i=1; i<=numAttributes; i++) {
                let selectorId = "#entity_attr" + i
                let inputId = "entity_attr" + i + "_form"
                let placeholder = entity.types[i-1]
                $(selectorId).html(
                    `<input type="text" id=${inputId} placeholder=${placeholder} style="padding: unset">`)
            }
        }

        function setupTypeSelector() {
            entity_type_cell.html(
                `<select id="entity_type_select">`)

            $("#entity_type_select").on("change", function () {
                clearTableCells()
                removeTableRows()
                makeEntityFitToTypeSchema(this.value)
                makeTable()
                setupTypeSelector()
                setupSelectorOptions(this.value)
                setupAttributesForms()
                showNewId()
                console.log(`Adjusted table to chosen entity type "${this.value}".`)
            });
        }

        function setupSelectorOptions(value=schemes.types[0]) {
            let selector = $('#entity_type_select')
            $.each(schemes.types, function (i, type) {
                selector.append($('<option>', {
                    value: type,
                    text : type
                }))
            })
            selector.val(value)
        }

        function fillAttributesFormsWithValues() {
            for (let i=1; i<=numAttributes; i++) {
                let id = "#entity_attr" + i + "_form"
                $(id).val(entity.values[i-1])
            }
        }

        function removeTableRows() {
            thead.remove()
            tbody.remove()
        }

        function removeTableRowsIfNotFirstQuery() {
            if (notfirstquery) {
                removeTableRows()
            }
            else {
                notfirstquery = true
            }
        }
        
        function showNewId () {
            clearIdCell()
            entity_id_cell.html(`${newId}`)
        }

        function clearIdCell() {
            entity_id_cell.empty()
        }

        function returnDataTypeError() {
            console.log('Data Type Error!')
            $("#errorMessage").html('The types of the given data do not match with the type scheme of the desired entity type! Please try again,')
        }

        function clearErrorMessage() {
            $("#errorMessage").empty()
        }

        // Entity Data Managment
        function clearEntityData () {
            entity = {id: '', type: '', attributes: [], values: [], types: []}
        }
        
        function updateEntityData(id, type, values) {
            entity.id = id
            entity.type = type
            entity.values = values
        }
        
        function getEntityDataToSave(mode) {
            let id
            let type
            let values = []

            if (mode === state.create) {
                id = newId
                type = $('#entity_type_select').val()
            }
            else {
                id = entity.id
                type = entity.type
            }

            for (let i=1; i<=numAttributes; i++) {
                let name = "#entity_attr" + i + "_form"
                values.push($(name).val())
            }
            
            return {id: id, type: type, values: values}
        }

        function makeEntityFitToTypeSchema(type=schemes.types[0]) {
            let i = schemes.types.indexOf(type)
            entity.attributes = schemes.attributes[i]
            entity.types = schemes.placeholders[i]
            numAttributes = entity.attributes.length
        }

        function dataTypesAreCorrect (d) {

            let index = 0
            for (let value of d.values) {
                let type = getDataType(value)
                if (type !== entity.types[index]) {
                    return false
                }
                else {
                    index++
                }
            }

            return true
        }

        function getDataType(value) {

            let type

            if (value.includes('@')) {
                type = 'email'
            }
            else if (containsNumber(value)) {

                if (value.includes('.') || value.includes('-')) {
                    type = 'date'
                }
                else {
                    type = 'number'
                }
            }
            else {
                type = 'string'
            }

            return type
        }

        function containsNumber(str) {
            return /\d/.test(str);
        }

        // Api Calls
        function getMetadataByEntityId (id, callback) {

            let apiData = {id: id}

            // Make API request
            $.post(apiUrls.getData, apiData).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(`Got metadata for entity with ID ${id}`)
                console.log(apiResponse);

                // Fill data-object with relevant data
                entity.id = apiResponse.data.id
                entity.type = apiResponse.data.type
                Object.entries(apiResponse.data.currentMetadata).forEach((data, index) => {
                    entity.values[index] = data[1]
                })
                Object.entries(apiResponse.data.metadataSchema).forEach((data, index) => {
                    entity.attributes[index] = data[0]
                    entity.types[index] = data[1]
                })

                // Store number of values
                numAttributes = entity.attributes.length
                console.log(`Entity has ${numAttributes} attributes.`)

                callback()

                return true
            })

            return false
        }

        function getDataSchemesForEntityTypes(callback) {

            $.post(apiUrls.getDataSchemesForEntityTypes).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for entity types!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting entity types, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(apiResponse);
                console.log(`Got type data.`)

                schemes.types = []
                Object.entries(apiResponse.data).forEach((element, index) => {
                    schemes.types.push(element[0])
                    schemes.attributes[index] = []
                    schemes.placeholders[index] = []
                    Object.entries(element[1]).forEach((item) => {
                        schemes.attributes[index].push(item[0])
                        schemes.placeholders[index].push(item[1])
                    })
                })

                callback()

                return true
            })
        }

        function getIdForNewEntity(callback) {
            
            $.post(apiUrls.getIdForNewEntity).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(apiResponse);
                console.log(`ID for new entity will be ${apiResponse.id}`)

                newId = apiResponse.id
                callback()

                return true
            })
        }
        
        function saveMetadata (id, type, values) {

            let apiData = {id: id, type: type, values: values}
            setMetadata(apiUrls.saveData, apiData)
        }

        function createEntity (id, type, values) {

            let apiData = {id: id, type: type, values: values}
            setMetadata(apiUrls.createEntity, apiData)
        }

        function setMetadata (apiUrl, apiData) {

            $.post(apiUrl, apiData).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${apiData.id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(apiResponse);
                if (apiUrl === apiUrls.createEntity) {
                    console.log(`Created entity with ID ${apiData.id}`)
                }
                else {
                    console.log(`Saved metadata for entity with ID ${apiData.id}`)
                }
            })
        }

    </script>
{%  endblock %}
