{% extends "base.twig" %}

{% block extraJS %}
    <script type="application/javascript" src="{{baseurl}}/js/dist/MetadataEditor.bundle.js"></script>

    <script>
        let mde = new MetadataEditor()
    </script>
{% endblock %}


{% block title %}Metadata Editor{% endblock %}

{% block content %}
    <h1>Metadata Editor</h1>

    <table class="doctable">
        <tr>
        <th>Entity ID</th>
            <td style="text-align: right">
                <div id="entity_id">
                </div>
            </td>
        </tr>
        <tr>
        <th>Type</th>
            <td style="text-align: right">
                <div id="entity_type">
                </div>
            </td>
        </tr>
        <tr>
        <th>Attribute 1</th>
            <td style="text-align: right">
                <div id="entity_attr1">
                </div>
            </td>
        </tr>
        <tr>
            <th>Attribute 2</th>
            <td style="text-align: right">
                <div id="entity_attr2">
                </div>
            </td>
        </tr>
        <tr>
        <th>Attribute 3</th>
            <td style="text-align: right">
                <div id="entity_attr3">
                </div>
            </td>
        </tr>
        <tr>
        <th>Attribute 4</th>
            <td style="text-align: right">
                <div id="entity_attr4">
                </div>
            </td>
        </tr>
    </table>

    <br>

    <div id="buttons"></div>
{% endblock %}

{% block finalBodyJS %}
    <script>

        // Constant to store data in
        let data = {id: 0, type: 'null', attributes: ['string', 0, 'date', 'email']}

        // Get selectors
        let form_id = $('#entity_id');
        let form_type = $('#entity_type')
        let form_attr1 = $('#entity_attr1')
        let form_attr2 = $('#entity_attr2')
        let form_attr3 = $('#entity_attr3')
        let form_attr4 = $('#entity_attr4')
        let buttons =  $('#buttons')

        // Get api urls
        let urlGen = new ApmUrlGenerator('')
        let apiUrlGetData = urlGen.apiMetadataEditorGetData()
        let apiUrlSaveData = urlGen.apiMetadataEditorSaveData()
        let apiUrlCreateData = urlGen.apiMetadataEditorCreateEntity()
        let apiUrlGetNewID = urlGen.apiMetadataEditorGetIdForNewEntity()

        // Button events
        setupDefaultButtons()

        function setupDefaultButtons () {

            buttons.empty()
            buttons.append
            (`<button type="button" id="get_button" name="Get" style="background-color: white; padding: unset">Get Metadata By Entity ID</button>
                <input type="number" id="id_selector" placeholder="0" style="padding: unset"><br>
                <button type="button" id="edit_button" name="Edit" style="background-color: white; padding: unset">Edit Metadata</button><br>
                <button type="button" id="create_button" name="Create" style="background-color: white; padding: unset">Create New Entity</button>`)

            $("#get_button").on("click", function () {
                let id_selector = $('#id_selector')
                let id = id_selector.val()
                getMetadata(id)
            });

            $("#edit_button").on("click", function () {
                setupInputForms()
                fillInputForms()
                setupSaveButton()
            });

            $("#create_button").on("click", function () {
                form_id.empty()
                getNewId()
                setupInputForms()
                setupSaveButton()
            })

        }

        function setupInputForms() {
            form_type.html(
                `<input type="text" id="entity_type_form" placeholder="string" style="padding: unset">`)
            form_attr1.html(
                `<input type="text" id="entity_attr1_form" placeholder="string" style="padding: unset">`)
            form_attr2.html(
                `<input type="text" id="entity_attr2_form" placeholder="number" style="padding: unset">`)
            form_attr3.html(
                `<input type="text" id="entity_attr3_form" placeholder="date" style="padding: unset">`)
            form_attr4.html(
                `<input type="email" id="entity_attr4_form" placeholder="email" style="padding: unset">`)
            }

        function fillInputForms() {
            $('#entity_type_form').val(data.type)
            $('#entity_attr1_form').val(data.attributes[0])
            $('#entity_attr2_form').val(data.attributes[1])
            $('#entity_attr3_form').val(data.attributes[2])
            $('#entity_attr4_form').val(data.attributes[3])
        }

        function clearTable() {
            form_type.empty()
            form_attr1.empty()
            form_attr2.empty()
            form_attr3.empty()
            form_attr4.empty()
        }
        
        function getNewId() {

            // Make API request
            $.post(apiUrlGetNewID).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(apiResponse);
                console.log(`ID for new entity is ${apiResponse.id}`)

                form_id.empty()
                form_id.html(`${apiResponse.id}`)

                return true
            })
        }

        function setupSaveButton () {
            buttons.empty()
            buttons.append(`<button type="button" id="save_button" name="Save" style="background-color: white; padding: unset">Save Metadata</button>`)

            $("#save_button").on("click", function () {
                let id = $('#entity_id_form').val()
                let type = $('#entity_type_form').val()
                let attributes = [$('#entity_attr1_form').val(), $('#entity_attr2_form').val(), $('#entity_attr3_form').val(), $('#entity_attr4_form').val()]

                saveMetadataById(id, type, attributes)
                setupDefaultButtons()
                clearTable()
                showMetadata(id, type, attributes)
                data = {id: id, type: type, attributes: attributes}
            })

            return true
        }

        function getMetadata (id) {

            let apiData = {id: id}

            // Make API request
            $.post(apiUrlGetData, apiData).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(`Got metadata for entity with ID ${id}`)
                console.log(apiResponse);

                data.id = apiResponse.data.id
                data.type = apiResponse.data.type
                data.attributes = [
                    apiResponse.data.currentMetadata.attribute1,
                    apiResponse.data.currentMetadata.attribute2,
                    apiResponse.data.currentMetadata.attribute3,
                    apiResponse.data.currentMetadata.attribute4]
                clearTable()
                form_id.empty()
                form_id.append(data.id)
                form_type.append(data.type)
                form_attr1.append(data.attributes[0])
                form_attr2.append(data.attributes[1])
                form_attr3.append(data.attributes[2])
                form_attr4.append(data.attributes[3])

                return true
            })

            return false
        }

        function showMetadata (id, type, attributes) {
            clearTable()
            form_id.append(id)
            form_type.append(type)
            form_attr1.append(attributes[0])
            form_attr2.append(attributes[1])
            form_attr3.append(attributes[2])
            form_attr4.append(attributes[3])
        }

        function saveMetadataById (id, type, attributes) {

            let apiData = {id:id, type: type, attributes: attributes}
            setMetadata(apiUrlSaveData, apiData)
            console.log(`Saved metadata for entity with ID ${id}`)

        }

        function setMetadata (apiUrlSet, apiData) {

            $.post(apiUrlSet, apiData).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${apiData.id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(apiResponse);

            })
        }

    </script>
{%  endblock %}