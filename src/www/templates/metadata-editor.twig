{% extends "base.twig" %}

{% block extraJS %}
    <script type="application/javascript" src="{{baseurl}}/js/dist/MetadataEditor.bundle.js"></script>

    <script>
        let mde = new MetadataEditor()
    </script>
{% endblock %}


{% block title %}Metadata Editor{% endblock %}

{% block content %}
    <h1>Metadata Editor</h1>

    <table class="dataTable"><tr id="tableHead"></tr><tr id="tableBody"></tr></table>
    <br>
    <div id="buttons"></div>
    <br>

{% endblock %}

{% block finalBodyJS %}
    <script>

        // Constant to store data in
        let entity = {id: 0, type: 'null', attributes: [], values: [], types: []}
        let numAttributes = 0

        // Selectors
        let form_id
        let form_type
        let buttons =  $('#buttons')

        // Get api urls
        let urlGen = new ApmUrlGenerator('')

        const apiUrls = {
            getData: urlGen.apiMetadataEditorGetData(),
            saveData: urlGen.apiMetadataEditorSaveData(),
            createEntity: urlGen.apiMetadataEditorCreateEntity(),
            getNewId: urlGen.apiMetadataEditorGetIdForNewEntity()
        };

        // Setup get button
        setupGetButton()

        function setupGetButton() {

            buttons.empty().append
            (`<button type="button" id="get_button" name="Get" style="background-color: white; padding: unset">Get Metadata</button>`)

            $("#get_button").on("click", function () {
                getMetadata(5, function() {
                    makeTable()
                    showMetadata()
                    setupDefaultButtons()
                })
            });
        }

        function setupDefaultButtons () {

            buttons.empty().append
            (`<button type="button" id="get_button" name="Get" style="background-color: white; padding: unset">Get Metadata</button>
                <button type="button" id="edit_button" name="Edit" style="background-color: white; padding: unset">Edit Metadata</button>
                <button type="button" id="create_button" name="Create" style="background-color: white; padding: unset">Create New Entity</button>`)

            $("#get_button").on("click", function () {
                clearData()
                getMetadata(5, function() {
                    showMetadata()
                })
            });

            $("#edit_button").on("click", function () {
                if (entity.type === 'null') {
                    console.log('Editing not possible. No entity was selected.')
                }
                else {
                    setupInputForms()
                    fillInputForms()
                    setupSaveAndCancelButtons('editmode')
                    console.log('Metadata can now be edited.')
                }
            });

            $("#create_button").on("click", function () {
                form_id.empty()
                getNewId()
                setupInputForms()
                setupSaveAndCancelButtons('createmode')
            })
        }

        function setupInputForms() {
            form_type.html(
                `<input type="text" id="entity_type_form" placeholder="string" style="padding: unset">`)
            for (let i=1; i<=numAttributes; i++) {
                let selectorId = "#entity_attr" + i
                let inputId = "entity_attr" + i + "_form"
                let placeholder = entity.types[i-1]
                $(selectorId).html(
                    `<input type="text" id=${inputId} placeholder=${placeholder} style="padding: unset">`)
            }
        }

        function fillInputForms() {
            $('#entity_type_form').val(entity.type)
            for (let i=1; i<=numAttributes; i++) {
                let id = "#entity_attr" + i + "_form"
                $(id).val(entity.values[i-1])
            }
        }

        function makeTable() {

            let thead = $('#tableHead')
            let tbody = $('#tableBody')

            thead.append(`
                <th>Entity ID</th>
                <th>Type</th>`)

            tbody.append(`
                <td>
                    <div id="entity_id">
                        -
                    </div>
                </td>
                <td>
                    <div id="entity_type">
                        -
                    </div>
                </td>`)

            for (let i=1; i<=numAttributes; i++) {

                let id = "entity_attr" + i

                thead.append(`<th>${entity.attributes[i-1]}</th>`)

            tbody.append(`
                <td>
                    <div id=${id}>
                        -
                    </div>
                </td>`)
            }

            form_id = $('#entity_id');
            form_type = $('#entity_type')

            return true
        }

        function clearTable() {
            form_id.empty()
            form_type.empty()
            for (let i=1; i<=numAttributes; i++) {
                let id = "#entity_attr" + i
                $(id).empty()
            }
        }

        function resetTable() {
            form_id.empty().append('-')
            form_type.empty().append('-')
            for (let i=1; i<=numAttributes; i++) {
                let id = "#entity_attr" + i
                $(id).empty().append('-')
            }
        }

        function getNewId() {

            // Make API request
            $.post(apiUrls.getNewId).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(apiResponse);
                console.log(`ID for new entity will be ${apiResponse.id}`)

                form_id.empty()
                form_id.html(`${apiResponse.id}`)
                entity.id = apiResponse.id

                return true
            })
        }

        function setupSaveAndCancelButtons (mode) {

            buttons.empty().append(
                `<button type="button" id="save_button" name="Save" style="background-color: white; padding: unset">Save Metadata</button>
                 <button type="button" id="cancel_button" name="Save" style="background-color: white; padding: unset">Cancel</button>`)

            $("#save_button").on("click", function () {

                let id = entity.id
                let type = $('#entity_type_form').val()
                let values = []

                for (let i=1; i<=numAttributes; i++) {
                    let id = "#entity_attr" + i + "_form"
                    values.push($(id).val())
                }

                entity.type = type
                entity.values = values

                if (mode === 'editmode') {
                    saveMetadataById(id, type, values)
                }
                else {
                    createEntity(id, type, values)
                }

                setupDefaultButtons()
                showMetadata()
            })

            $("#cancel_button").on("click", function () {
                resetTable()
                clearData()
                setupDefaultButtons()
            })

            return true
        }

        function clearData () {
            entity.id = 0
            entity.type = 'null'
            entity.values = []
        }

        function getMetadata (id, callback) {

            let apiData = {id: id}

            // Make API request
            $.post(apiUrls.getData, apiData).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(`Got metadata for entity with ID ${id}`)
                console.log(apiResponse);

                // Fill data-object with relevant data
                entity.id = apiResponse.data.id
                entity.type = apiResponse.data.type
                Object.entries(apiResponse.data.currentMetadata).forEach((value, index) => {
                    entity.values[index] = value[1]
                })
                Object.entries(apiResponse.data.metadataSchema).forEach((value, index) => {
                    entity.attributes[index] = value[0]
                    entity.types[index] = value[1]
                })

                // Store number of values
                numAttributes = entity.attributes.length
                console.log(`Entity has ${numAttributes} attributes.`)

                callback()

                return true
            })

            return false
        }

        function showMetadata () {
            clearTable()
            form_id.append(entity.id)
            form_type.append(entity.type)
            for (let i=1; i<=numAttributes; i++) {
                let id = "#entity_attr" + i
                $(id).append(entity.values[i-1])
            }
        }

        function saveMetadataById (id, type, values) {

            let apiData = {id: id, type: type, values: values}
            setMetadata(apiUrls.saveData, apiData)
        }

        function createEntity (id, type, values) {

            let apiData = {id: id, type: type, values: values}
            setMetadata(apiUrls.createEntity, apiData)
        }

        function setMetadata (apiUrl, apiData) {

            $.post(apiUrl, apiData).done((apiResponse) => {

                // Catch errors
                if (apiResponse.status !== 'OK') {
                    console.log(`Error in query for metadata of entity with ID ${apiData.id}!`);
                    if (apiResponse.errorData !== undefined) {
                        console.log(apiResponse.errorData);
                    }
                    errorMessageDiv.html(`Error while getting metadata, please report to technical administrators.`)
                        .removeClass('text-error');
                    return;
                }

                console.log(apiResponse);
                console.log(`Created and/or saved metadata for entity with ID ${apiData.id}`)

            })
        }

    </script>
{%  endblock %}
