{% extends "base.twig" %}

{% block title %}Search{% endblock %}

{% block extraCSS%}
<style>
    div#search_form {
        margin-bottom: 1rem;
        margin-top: 2rem;
    }

    div#search_results {
        margin-bottom: 2rem;
        margin-left: 2rem;
    }
</style>
{% endblock%}

{% block finalBodyJS %}
    <script>
      $(() => {

        // Get selectors of the searchBox and the searchResults container
        let searchBox = $("#searchBox")
        let docList = $("#docList")
        let contextSlider = $("#contextSlider")

        contextSlider.on("click", () => {
          displayResults(searchBox, contextSlider, docList)
        })

        docList.on("click", () => {
          displayResults(searchBox, contextSlider, docList)
        })

        // Key-Up function for search box
        searchBox.on("keyup", () => {
          displayResults(searchBox, contextSlider, docList)
        })
      })

      // Function to display results
      function displayResults (searchBox, contextSlider, docList) {

        // Div for output
        let searchResultsDiv = $("#search_results")

        // Get user input
        let searchText = searchBox.val()
        let sliderVal = contextSlider.val()
        let docName = docList.val();

        // Start search only if keyword has at least two characters
        if (searchText.length > 1) {

          // Send user input to ApiSearch (via routing in index.php) and print returned matches
          $.post("{{ url_for('search.keyword') }}", { searchText: searchText, sliderVal: sliderVal, docName: docName })
            .done((apiResponse) => {
              console.log(apiResponse)

              let numMatches = apiResponse['matches'].length

              // If there are no matches, display this to the user
              if (numMatches === 0) {
                searchResultsDiv
                  .html(`'Nothing found for ${apiResponse['searchString']}'<br/> Server time: ${apiResponse['serverTime']}`)
                  .addClass('text-warning')
              }

              // If there is exactly one match, display the title, the page and the transcriber of the matched document
              else if (numMatches === 1) {

                // Collect relevant Data from API response
                let title = apiResponse['matches'][0]['title']
                let page = apiResponse['matches'][0]['page']
                let column = apiResponse['matches'][0]['column']
                let transcriber = apiResponse['matches'][0]['transcriber']
                let csKeywordsWithPos = apiResponse['matches'][0]['csKeywordsWithPos']
                let keywordsInContext = apiResponse['matches'][0]['keywordsInContext']
                let keywordFreq = apiResponse['matches'][0]['keywordFreq']
                let keyword = apiResponse['searchString']
                let time = apiResponse['serverTime']

                // Convert all occurences of the keyword in their contexts into a single string
                let keywordsInContextString = ""

                for (let j = 0; j < keywordFreq; j++) {
                  keywordsInContextString = keywordsInContextString + makeKeywordBold(keywordsInContext[j], csKeywordsWithPos[j][0]) + "<br/>"
                }

                let results = (
                    keywordFreq + ' occurence(s) in ' +
                    'column ' + column + ", on " +
                    'page ' + page + ", of " +
                    title + ", " +
                    'transcribed by ' + transcriber + '<br/>').italics() +
                  keywordsInContextString

                // Display results
                searchResultsDiv
                  .html(`<b>${numMatches} column found, which contains the keyword '${keyword}':</b> <br/><br/> ${results} <br/><br/>  (${time})`)
                  .removeClass('text-warning')
              }

              // If there is more than one match, display them all like above
              else {

                let results = ''
                let keyword = apiResponse['searchString']
                let time = apiResponse['serverTime']

                // Write all matches into a string
                for (let i = 0; i < numMatches; i++) {

                  // Collect relevant Data from API response
                  let title = apiResponse['matches'][i]['title']
                  let page = apiResponse['matches'][i]['page']
                  let column = apiResponse['matches'][i]['column']
                  let transcriber = apiResponse['matches'][i]['transcriber']
                  let csKeywordsWithPos = apiResponse['matches'][i]['csKeywordsWithPos']
                  let keywordsInContext = apiResponse['matches'][i]['keywordsInContext']
                  let keywordFreq = apiResponse['matches'][i]['keywordFreq']

                  // Convert all occurences of the keyword in their contexts into a single string
                  let keywordsInContextString = ""

                  for (let j = 0; j < keywordFreq; j++) {
                    keywordsInContextString = keywordsInContextString + makeKeywordBold(keywordsInContext[j], csKeywordsWithPos[j][0]) + "<br/>"
                  }

                  results = results + '<br/>' +
                    (
                      keywordFreq + ' occurence(s) in ' +
                      'column ' + column + ", on " +
                      'page ' + page + ", of " +
                      title + ", " +
                      'transcribed by ' + transcriber + '<br/>').italics() +
                    keywordsInContextString + '<br/>'
                }

                // Display results
                searchResultsDiv
                  .html(`<b>${numMatches} columns found, which contain the keyword '${keyword}':</b><br/> ${results} <br/><br/> (${time})`)
                  .removeClass('text-warning')
              }
              // If something went wrong, i. e. the OpenSearch server is down, display an error message
            }).fail((status) => {
            console.log(status)
            searchResultsDiv
              .html('Search is currently not available. Please try again later.')
              .removeClass('text-error')

          })
        }
      }

      // Function to highlight the searched keyword in its context
      function makeKeywordBold (text, keyword) {

          let keywordLen = keyword.length

        // If keyword occurs two times in the text, highlight the second one (the first one should already been handled in the previous match)
            if (text.split(keyword).length - 1 == 2) {
                let firstPos = text.indexOf(keyword)
                let slicedText = text.slice(firstPos + keywordLen, text.length)
                let secondPos = slicedText.indexOf(keyword)
                let boldKeyword = keyword.bold()

                return text.slice(0, firstPos + keywordLen + secondPos) + boldKeyword + text.slice(firstPos + keywordLen + secondPos + keywordLen, text.length)
            }
            else {
                let pos = text.indexOf(keyword)
                let boldKeyword = keyword.bold()

                return text.slice(0, pos) + boldKeyword + text.slice(pos + keywordLen, text.length)
            }
        }
    </script>
{%  endblock %}

{% block content %}
    <h1> Search </h1>
    <div id="search_form">
        <label for="searchBox"></label>
        <input type="text" id="searchBox" placeholder="Search..." value="">
    </div>

    <select name="docList" id="docList">

        <option>Search in all documents...</option>
        <option>M-VA-VAT-BAV-Vat.lat.2076</option>
        <option>Bukarest</option>
        <option>Madrid</option>

    </select>
    <p></p>
    <form>
        <label for="contextSlider"></label>
        <input type="range" id="contextSlider" name="contextSlider" min="0" max="400">
    </form>

    <div id="search_results"></div>

{% endblock %}



