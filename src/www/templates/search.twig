{% extends "base.twig" %}

{% block title %}Search{% endblock %}

{% block finalBodyJS %}
    <script>
      $(() => {

        // Get selectors for catching user input
        let keywords_box = $("#keywordBox")
        let doc = $(document)
        // let edition_mode = $("#edition_mode")
        // let search_table = $("#searchTable")

        // Get selector for signaling errors to user
        let errorMessageDiv = $("#error_message")

        // Get lists for transcript and transcriber forms
        getListFromOpenSearch ('titles', errorMessageDiv)
        getListFromOpenSearch ('transcribers', errorMessageDiv)

        // Start query when the 'Enter' key is pressed
          doc.on("keyup", function (event) {
            let user_input = keywords_box.val()
            if ( event.key === 'Enter' && user_input !== "") {
              search()
            }
            else if (event.key === 'Enter' && user_input === "") {
              errorMessageDiv.html(`<br>Please type in a keyword!<br><br>`)
            }
          })

    //     edition_mode.on('click', function () {
    //       search_table.empty()
    //       search_table.html(`
    //       <tr><td><b>Keywords</b></td><td><b>Text</b></td><td><b>Radius</b></td><td class="text-center"><b>Lemmatization</b></td></tr>
    //
    // <tr>
    //     <td>
    //         <div id="search_form">
    //         <label for="keywordBox"></label>
    //         <input type="text" id="keywordBox" placeholder="">
    //         </div>
    //     </td>
    //     <td>
    //         <div id="doc_form">
    //             <label for="transcriptBox"></label>
    //             <input list="titleList" id="transcriptBox" placeholder="" autocomplete="off">
    //             <datalist id="titleList">
    //             </datalist>
    //         </div>
    //     </td>
    //     <td>
    //         <form>
    //             <label for="radiusSlider"></label>
    //             <input type="range" id="radiusSlider" name="radiusSlider" min="10" max="60" value="18">
    //         </form>
    //     </td>
    //   <td class="text-center">
    //     <div>
    //       <input type="checkbox" id="lemmatize" name="lemmatize">
    //     </div>
    //   </td>
    // </tr>`)
    //     })
      })

      // Function to get list of indexed values, i.e. titles or transcribers, via an API call
      function getListFromOpenSearch (category, errorMessageDiv) {

        // Get queried category
        if (category === 'titles') {

          // Make API request
          $.post("{{ url_for('search.titles') }}").done((apiResponse) => {

            // Get titleList selector and clear the list
            let title_list = $("#titleList")
            title_list.empty()

            // Catch errors
            if (apiResponse.status !== 'OK') {
              console.log(`Error in query for titles!`)
              if (apiResponse.errorData !== undefined) {
                console.log(apiResponse.errorData)
              }
              errorMessageDiv.html('Error while getting doc list, please report to technical administrators.')
                .removeClass('text-error')
              return
            }
            console.log(apiResponse)

            // Get titles from apiResponse
            let titles = apiResponse[category]

            // Fill datatable with title names
            titles.forEach(function (title) {title_list.append(`<option>${title}</option>`)})

          })
        }
        else if (category === 'transcribers') {

          // Do exactly the same as before, but with transcribers instead of titles - by time this could be merged into one general function
          $.post("{{ url_for('search.transcribers') }}").done((apiResponse) => {

            let transcriber_list = $("#transcriberList")
            transcriber_list.empty()

            if (apiResponse.status !== 'OK') {
              console.log(`Error in query for transcribers!`)
              if (apiResponse.errorData !== undefined) {
                console.log(apiResponse.errorData)
              }
              errorMessageDiv
                .html('Error while getting transcribers list, please report to technical administrators.')
                .removeClass('text-error')
              return
            }
            console.log(apiResponse)

            let transcribers = apiResponse[category]

            transcribers.forEach(function (transcriber) {transcriber_list.append(`<option>${transcriber}</option>`)})

          })
        }
      }

      // Function to start search process via API call
      function search () {

        // Get selectors for user input and get input
        let keywords_box = $("#keywordBox")
        let transcript_box = $("#transcriptBox")
        let transcriber_box = $("#transcriberBox")
        let radius_slider = $("#radiusSlider")
        let lemmatization_box = $("#lemmatize")
        let spinner = $("#spinner")
        let results_body = $("#resultsTable tbody")
        let results_head = $("#resultsTable thead")
        let error_message = $("#error_message")

        // Get values of all boxes/fields
        let searched_phrase = keywords_box.val()
        let title = transcript_box.val();
        let transcriber = transcriber_box.val();
        let radius = radius_slider.val()
        let lemmatize = lemmatization_box.prop('checked')

        // Empty the results-table/error-box and signalize search process
        results_body.empty()
        results_head.empty()
        error_message.empty()
        spinner.html(`<div class="spinner-border" role="status"></div>`)

        // Send all user input to ApiSearch (via routing in index.php) and print returned matches
        $.post("{{ url_for('search.keyword') }}", { searched_phrase: searched_phrase, radius: radius, title: title, transcriber: transcriber, lemmatize: lemmatize })
          .done((apiResponse) => {

            // Catch errors
            if (apiResponse.status !== 'OK') {
              console.log(`Error in query`)
              if (apiResponse.errorData !== undefined) {
                console.log(apiResponse.errorData)
              }
              error_message
                .html('Error while searching, please report to technical administrators.')
                .removeClass('text-error')
              return
            }

            console.log(apiResponse)

            // Call displayResults-function
            spinner.empty()
            displayResults(apiResponse)

      }).fail((status) => {
        console.log(status)
        spinner.empty()
          error_message
          .html('Search is currently not available. Please try again later.')
          .removeClass('text-error')
      })
      }

      // Function to collect and display the search results in a readable form
      function displayResults (results) {

        // Get selectors for displaying results
        let results_body = $("#resultsTable tbody")
        let results_head = $("#resultsTable thead")
        let error_message = $("#error_message")

        // Get instance of ApmUrlGenerator to create links to matched doc pages
        let url_generator = new ApmUrlGenerator('{{baseurl}}')

        // Get column data of search results and language of matched passages
        let data = results['data']
        let lang = results['lang']

        // Count matches
        let num_columns = data.length
        let num_passages = results['num_passages_total']
        let num_docs = getNumDocs(data, num_columns)

        // If there are no matches, display this to the user and empty the results table
        if (num_columns === 0) {
          results_head.empty()
          results_body.empty()
          error_message.html(`<br>Nothing found!<br><br>`)
        }

        // If there is exactly one matched passage, display it with exact information
        else if (num_columns === 1 && num_passages === 1) {

          // Make table head
          results_head.empty()
          results_head.append(`<tr><th>Matched Passage (${num_passages})</th><th>Document (${num_docs})</th><th>Foliation</th><th>Transcriber</th><th>Link</th></tr>`)

          // Collect relevant data from API response
          let title = data[0]['title']
          let seq = data[0]['seq']
          let foliation = data[0]['foliation']
          let column = data[0]['column']
          let transcriber = data[0]['transcriber'].split(" ")[1]
          let passages = data[0]['passage_tokenized']
          let tokens_matched = data[0]['tokens_matched']
          let docID = data[0]['docID']

          // Get link for matched page (sequence number)
          let url = url_generator.sitePageView(docID, seq, column)
          let link = getLink(url)

          // Convert the tokens_matched in their context into a single string and highlight the matched tokens
          let passages_string = ""

          for (let j = 0; j < passages.length; j++) {
            passages_string = highlight(passages[j], tokens_matched[j])
            passages_string = removeBlanks(passages_string)

            // Fill table with results - layout depends slightly on the language of the transcripts
            results_body.empty()
            if (lang==='la') {
              results_body.append(
                      `<tr><td class="text-justify">${passages_string}</td><td>${title}</td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
            }
            else if (lang==='he') {
              results_body.append(
                      `<tr><td class="text-justify" class="text-he">${passages_string}</td><td>${title}</td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
            }
            else if (lang==='ar') {
              results_body.append(
                      `<tr><td class="text-justify" class="text-ar">${passages_string}</td><td>${title}</td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
            }
          }
        }

        // If there is more than one matched passage, display them all with exact information
        else {

          // Make table head
          results_head.empty()
          results_head.append(`<tr><th>Matched Passage (${num_passages})</th><th>Document (${num_docs})</th><th>Foliation</th><th>Transcriber</th><th>Link</th></tr>`)
          results_body.empty()

          // Make variable for storing title of preceding column in the dataset to display only ONE title,
          // if there are plenty matched columns/passages of the same document
          let prec_title = " "

          // Write all matches into the results table
          for (let i = 0; i < num_columns; i++) {

            // Collect relevant Data from API response
            let title = data[i]['title']
            let seq = data[i]['seq']
            let foliation = data[i]['foliation']
            let column = data[i]['column']
            let transcriber = data[i]['transcriber'].split(" ")[1]
            let tokens_matched = data[i]['tokens_matched']
            let passages = data[i]['passage_tokenized']
            let docID = data[i]['docID']

            // Get link for matched column
            let url = url_generator.sitePageView(docID, seq, column)
            let link = getLink(url)

            // Convert all occurrences of the keyword in their contexts into a single string and highlight the tokens_matched
            let passages_string = ""

            for (let j = 0; j < passages.length; j++) {

              passages_string = highlight(passages[j], tokens_matched[j])
              passages_string = removeBlanks(passages_string)

              // Fill table with results - layout depends slightly on the language of the transcripts
              if (title === prec_title) {
                if (lang==='la') {
                  results_body.append(
                          `<tr><td class="text-justify">${passages_string}</td><td></td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
                }
                else if (lang==='he') {
                  results_body.append(
                          `<tr><td class="text-justify" class="text-he">${passages_string}</td><td></td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
                }
                else if (lang==='ar') {
                  results_body.append(
                          `<tr><td class="text-justify" class="text-ar">${passages_string}</td><td></td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
                }
              }
              else {
                if (lang==='la') {
                  results_body.append(
                          `<tr><td class="text-justify">${passages_string}</td><td>${title}</td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
                }
                else if (lang==='he') {
                  results_body.append(
                          `<tr><td class="text-justify" class="text-he">${passages_string}</td><td>${title}</td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
                }
                else if (lang==='ar') {
                  results_body.append(
                          `<tr><td class="text-justify" class="text-ar">${passages_string}</td><td>${title}</td><td class="text-center">${foliation}</td><td>${transcriber}</td><td class="text-center">${link}</td></tr>`)
                }
                prec_title = title
              }
            }
          }
        }
      }

      // Function to add a link to a string in html
      function getLink (url) {
        return `<a class="fas fa-external-link-alt" target="_blank" href=${url} </a>`;
      }

      // Function to calculate total number of matched documents
      function getNumDocs (data, numColumns) {

        let num_docs = 0
        let prev_title = ""

        for (let i=0; i<numColumns; i++) {
          let title = data[i]['title']
          if (title !== prev_title) {
            num_docs = num_docs + 1
          }
          prev_title = title
        }
        return num_docs
      }

      // Function to highlight the searched keywords in their context
      function highlight (passage, tokens_matched) {

        // String to return – contains passages with highlighted words in it
        let passage_highlighted = ""

        // Convert array to string with bold tokens_matched
        for (let i=0; i<passage.length; i++) {
          // Get current word of passage-array
          let token = passage[i]
          // Bold token, if it is one of the tokens_matched
          if (tokens_matched.indexOf(token) !== -1) {
            // token = token.bold()
            token = "<mark>" + token + "</mark>"
          }
          // Append token to returned string
          passage_highlighted = passage_highlighted + token + " "
        }

        return passage_highlighted
      }

      // Function to remove inadequate blanks from transcript
      function removeBlanks (text) {
        text = text.replaceAll(" .", ".")
        text = text.replaceAll(" ,", ",")
        text = text.replaceAll(" :", ":")
        text = text.replaceAll("[ ", "[")
        text = text.replaceAll(" ]", "]")

        return text
      }

    </script>
{%  endblock %}

{% block content %}
    <h1> Search </h1>
  <p>
    Type in a keyword and press 'Enter' to search.
{#  <div>#}
{#  <b>Edition Mode</b>#}
{#    <input type="checkbox" id="edition_mode" name="edition_mode">#}
{#  </div>#}
  </p>

  <table class="dataTable" id="searchTable">
    <tr><td><b>Keywords</b></td><td><b>Transcript</b></td><td><b>Transcriber</b></td><td><b>Radius</b></td><td class="text-center"><b>Lemmatization</b></td></tr>

    <tr>
        <td>
            <div id="search_form">
            <label for="keywordBox"></label>
            <input type="text" id="keywordBox" placeholder="">
            </div>
        </td>
        <td>
            <div id="doc_form">
                <label for="transcriptBox"></label>
                <input list="titleList" id="transcriptBox" placeholder="" autocomplete="off">
                <datalist id="titleList">
                </datalist>
            </div>
        </td>
        <td>
            <div id="transcriber_form">
                <label for="transcriberBox"></label>
                <input list="transcriberList" id="transcriberBox" placeholder="" autocomplete="off">
                <datalist id="transcriberList">
                </datalist>
            </div>
        </td>
        <td>
            <form>
                <label for="radiusSlider"></label>
                <input type="range" id="radiusSlider" name="radiusSlider" min="10" max="60" value="18">
            </form>
        </td>
      <td class="text-center">
        <div>
          <input type="checkbox" id="lemmatize" name="lemmatize">
        </div>
      </td>
    </tr>
</table>

  <div id="error_message">
  </div>

  <div id="spinner" class="text-muted" style="margin: 20px; text-align: center;">
  </div>

    <div id="noMatchesDiv">
    </div>

    <table class="doctable dataTable no-footer" id="resultsTable">
        <thead></thead>
        <tbody></tbody>
    </table>

    <p></p>

{% endblock %}



