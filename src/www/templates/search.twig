{% extends "base.twig" %}

{% block title %}Search{% endblock %}

{% block extraCSS%}
<style>
    div#search_form {
        margin-bottom: 1rem;
        margin-top: 2rem;
    }

    div#search_results {
        margin-bottom: 2rem;
        margin-left: 2rem;
    }
</style>
{% endblock%}

{% block finalBodyJS %}
    <script>
      $(() => {

        // Get selectors of the searchBox and the searchResults container
        let searchBox = $("#searchBox")
        let docList = $("#docList")
        let contextSlider = $("#contextSlider")

        // Key-Up functions for search box, docList and contextSlider - all call the displayResults-function
        searchBox.on("keyup", () => {
          displayResults(searchBox, contextSlider, docList)
        })

        docList.on("click", () => {
          displayResults(searchBox, contextSlider, docList)
        })

        contextSlider.on("change", () => {
          displayResults(searchBox, contextSlider, docList)
        })
      })

      // Function to collect and display the search results in readable form
      function displayResults (searchBox, contextSlider, docList) {

        // Get selector for output-Div
        let searchResultsDiv = $("#search_results")
        let resultsTableB = $("#resultsTable tbody")
        let resultsTableH = $("#resultsTable thead")

        // Make clean results table
        resultsTableH.empty()
        resultsTableH.append(`<tr><th>Title</th><th>Matched Passage</th><th>Page</th><th>Column</th><th>Transcriber</th></tr>`)

        // Get all user input
        let searchText = searchBox.val()
        let sliderVal = contextSlider.val()
        let docName = docList.val();

          // Send all user input to ApiSearch (via routing in index.php) and print returned matches
          $.post("{{ url_for('search.keyword') }}", { searchText: searchText, sliderVal: sliderVal, docName: docName })
            .done((apiResponse) => {
              console.log(apiResponse)

              // Count matches
              let numMatchedColumns = apiResponse['data'].length
              let numMatches = apiResponse['numMatches']

              var time = apiResponse['serverTime']
              var searchString = apiResponse['searchString']

              // If there are no matches, display this to the user and empty the table
              if (numMatchedColumns === 0) {
                searchResultsDiv
                  .html(`<b>No matches found for '${searchString}' (${time})`)
                  .addClass('text-warning')

                resultsTableB.empty()
              }

              // If there is exactly one matched column, display it with exact information
              else if (numMatchedColumns === 1 && numMatches === 1) {

                // Display number of matches
                searchResultsDiv
                  .html(`<b>${numMatches} match found for '${searchString}' (${time})`)
                  .removeClass('text-warning')

                // Collect relevant data from API response
                let title = apiResponse['data'][0]['title']
                let page = apiResponse['data'][0]['page']
                let column = apiResponse['data'][0]['column']
                let transcriber = apiResponse['data'][0]['transcriber']
                let keywordPosInContext = apiResponse['data'][0]['keywordPosInContext']
                let keywordsInContext = apiResponse['data'][0]['keywordsInContext']
                let keywordFreq = apiResponse['data'][0]['keywordFreq']
                let keywords = apiResponse['data'][0]['keywords']

                // Convert the keywords in their context into a single string and highlight the keywords
                let keywordsInContextString = ""


                for (let j = 0; j < keywordFreq; j++) {
                  keywordsInContextString = makeKeywordBold(keywordsInContext[j], keywordPosInContext[j], keywords)

                  // Fill table with results
                  resultsTableB.empty()
                  resultsTableB.append(
                    `<tr><td>${title}</td><td>${keywordsInContextString}</td><td>${page}</td><td>${column}</td><td>${transcriber}</td></tr>`)
                }
              }

              // If there is more than one matched column, display them all with exact information
              else {

                var precTitle = " "

                // Display number of matches
                searchResultsDiv
                  .html(`<b>${numMatches} matches found for '${searchString}' (${time})`)
                  .removeClass('text-warning')

                // Clear table content
                resultsTableB.empty()

                // Write all matches into the results table
                for (let i = 0; i < numMatchedColumns; i++) {

                  // Collect relevant Data from API response
                  let title = apiResponse['data'][i]['title']
                  let page = apiResponse['data'][i]['page']
                  let column = apiResponse['data'][i]['column']
                  let transcriber = apiResponse['data'][i]['transcriber']
                  let keywords = apiResponse['data'][i]['keywords']
                  let keywordPosInContext = apiResponse['data'][i]['keywordPosInContext']
                  let keywordsInContext = apiResponse['data'][i]['keywordsInContext']
                  let keywordFreq = apiResponse['data'][i]['keywordFreq']

                  // Convert all occurrences of the keyword in their contexts into a single string and highlight the keywords
                  let keywordsInContextString = ""

                  for (let j = 0; j < keywordFreq; j++) {

                    keywordsInContextString = makeKeywordBold(keywordsInContext[j], keywordPosInContext[j], keywords)

                    // Fill table with results
                    if (title === precTitle) {
                    resultsTableB.append(
                      `<tr><td></td><td>${keywordsInContextString}</td><td>${page}</td><td>${column}</td><td>${transcriber}</td></tr>`)
                      }
                      else {
                      resultsTableB.append(
                        `<tr><td>${title}</td><td>${keywordsInContextString}</td><td>${page}</td><td>${column}</td><td>${transcriber}</td></tr>`)
                      precTitle = title
                      }
                    }
                  }
              }
              // If something went wrong, i. e. the OpenSearch server is down, display an error message
            }).fail((status) => {
            console.log(status)
            searchResultsDiv
              .html('Search is currently not available. Please try again later.')
              .removeClass('text-error')

          })
      }

      // Function to highlight the searched keyword in its context
      function makeKeywordBold (keywordInContext, keywordPos, keywords) {

        // Variable holding text with highlighted keyword in it and variable holding the capitalized keyword in it (used above)
        let textWithBoldKeyword = ""
        let keyword = keywords[0]

        // Get capitalized keyword and length of keyword for correct boldening in the next steps
        let keywordCap = keyword.replace(/^\w/, (c) => c.toUpperCase())
        let keywordLen = keyword.length

        // Iterate over all words
        for (i=0; i<keywordInContext.length; i++) {

          // Get current word of keywordInContext-array
          let stringContainingKeyword = keywordInContext[i]

          // If current index of array is not identical to position of keyword, append word at index to textWithBoldKeyword
          if (i !== keywordPos) {
            textWithBoldKeyword = textWithBoldKeyword + stringContainingKeyword + " "
          }

          // If index is identical to position of keyword, append the boldened word to textWithBoldKeyword
          // Therefore, it needs some checks, since we want to bolden only the searched term and not necessarily whole words or
          // even additional words â€“ rarely, but sometimes there can be two words together at the same index in the keywordInContext-array

          else {
            // If matched word is identical to searched keyword, append it to textWithBoldKeyword in bold letters
            if (stringContainingKeyword === keyword || stringContainingKeyword === keywordCap) {
              textWithBoldKeyword = textWithBoldKeyword + stringContainingKeyword.bold() + " "
            }

            // If matched word is not identical to searched keyword, it needs more checks
            else {
              // Get the position of the searched keyword (capitalized and uncapitalized) in the matched word
              // One of these variables will have the value -1, which means the searched keyword is not in the matched word
              let keywordIndex = stringContainingKeyword.indexOf(keyword)
              let keywordCapIndex = stringContainingKeyword.indexOf(keywordCap)

              // Variables for the partitions of the matched word
              let matchedPart = ""
              let unmatchedPartPre = ""
              let unmatchedPartPost = ""

              // If the unapitalized keyword is in the matched word, partition the word to be able to bolden only the part matching the keyword
              if (keywordIndex !== -1) {
                  matchedPart = stringContainingKeyword.substring(keywordIndex, keywordIndex + keywordLen)
                  unmatchedPartPre =  stringContainingKeyword.substring(0, keywordIndex)
                  unmatchedPartPost = stringContainingKeyword.substring(keywordIndex + keywordLen)
              }

              // Same procedure as above, but with the capitalized keyword
              else {
                  matchedPart = stringContainingKeyword.substring(keywordCapIndex, keywordCapIndex + keywordLen)
                  unmatchedPartPre =  stringContainingKeyword.substring(0, keywordCapIndex)
                  unmatchedPartPost = stringContainingKeyword.substring(keywordCapIndex + keywordLen)
              }

              // Append the three substrings to textWithBoldKeyword â€“ bolden the matchedPart
              textWithBoldKeyword = textWithBoldKeyword + " " + unmatchedPartPre + matchedPart.bold() + unmatchedPartPost + " "
            }
          }
        }

        // First Steps: Bolden multiple keywords
        for (i=1; i<keywords.length; i++) {
          let keyword = keywords[i]
          let keywordLen = keyword.length
          let keywordPos = textWithBoldKeyword.indexOf (keyword)

          if (keywordPos === -1) {
            keyword = keyword.replace(/^\w/, (c) => c.toUpperCase())
            keywordPos = textWithBoldKeyword.indexOf (keyword)
          }

          let precWords = textWithBoldKeyword.slice(0, keywordPos)
          let succWords = textWithBoldKeyword.slice(keywordPos+keywordLen)
          textWithBoldKeyword = precWords + keyword.bold() + succWords
        }

        return textWithBoldKeyword
      }
    </script>
{%  endblock %}

{% block content %}
    <h1> Search </h1>
    <div id="search_form">
        <label for="searchBox"></label>
        <input type="text" id="searchBox" placeholder="Search..." value="">
    </div>

    <select name="docList" id="docList">

        <option>Search in all documents...</option>
        <option>M-VA-VAT-BAV-Vat.lat.2076</option>

    </select>
    <p></p>
    <form>
        <label for="contextSlider"></label>
        <input type="range" id="contextSlider" name="contextSlider" min="3" max="40" value="6">
    </form>
    <p></p>

    <div id="search_results"></div>
    <p></p>

    <table class="doctable dataTable no-footer" id="resultsTable">
        <thead></thead>
        <tbody></tbody>
    </table>

    <p></p>

{% endblock %}



