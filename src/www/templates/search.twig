{% extends "base.twig" %}

{% block title %}Search{% endblock %}

{% block extraCSS%}
<style>
    div#search_form {
        margin-bottom: 1rem;
        margin-top: 2rem;
    }

    div#search_results {
        margin-bottom: 2rem;
        margin-left: 2rem;
    }
</style>
{% endblock%}

{% block finalBodyJS %}
    <script>
      $(() => {

        // Get selectors of the searchBox and the searchResults container
        let searchBox = $("#searchBox")
        let searchResultsDiv = $("#search_results")

        // Key-Up function
        searchBox.on("keyup", () => {

          // Get user input
          let searchText = searchBox.val()
          // Send user input to ApiSearch (via routing in index.php) and print returned matches
          $.post( "{{url_for('search.keyword')}}", {searchText: searchText})
            .done( (apiResponse) => {
              console.log(apiResponse)

              // If there are no matches, display this to the user
              if (apiResponse['matches'].length === 0) {
                searchResultsDiv
                  .html(`'Nothing found for ${apiResponse['searchString']}'<br/> Server time: ${apiResponse['serverTime']}`)
                  .addClass('text-warning')
              }

              // If there is exactly one match, display the title, the page and the transcriber of the matched document
              else if (apiResponse['matches'].length === 1) {
                // layout matches
                let matches = 'Document title: ' + apiResponse['matches'][0]['title'] + ', Page ' + apiResponse['matches'][0]['page'] + ', Column ' + apiResponse['matches'][i]['column'] + ', Transcriber: ' + apiResponse['matches'][0]['transcriber']
                // display matches
                searchResultsDiv
                  .html(`${apiResponse['matches'].length} match found for '${apiResponse['searchString']}': <br/> ${matches} <br/>  (${apiResponse['serverTime']})`)
                  .removeClass('text-warning')
              }

              // If there is more than one match, display them all like above
              else {
                // Count the number of matches
                let matches = ''
                let numMatches = apiResponse['matches'].length

                // Write all matches into a string
                for (let i = 0; i < numMatches; i++) {
                  matches = matches + '<br/>' + 'Document title: ' + apiResponse['matches'][i]['title'] + ', Page ' + apiResponse['matches'][i]['page'] + ', Column ' + apiResponse['matches'][i]['column'] + ', Transcriber: ' + apiResponse['matches'][i]['transcriber'] + '<br/>' + apiResponse['matches'][i]['context'] + '<br/>'
                }

                // Display matches
                searchResultsDiv
                  .html(`${apiResponse['matches'].length} matches found for '${apiResponse['searchString']}':<br/> ${matches} <br/>  (${apiResponse['serverTime']})`)
                  .removeClass('text-warning')
              }
              // If something went wrong, i. e. the OpenSearch server is down, display an error message
          }).fail( (status) => {
            console.log(status)
            searchResultsDiv
              .html('Search is currently not available. Please try again later.')
              .removeClass('text-error')

          })
        })
      })
    </script>
{%  endblock %}

{% block content %}
    <h1> Search </h1>
    <div id="search_form">
        <label for="searchBox">Text to search:</label> <input type="text" id="searchBox" placeholder="Enter text here" value="">
    </div>
    <div id="search_results"></div>

{% endblock %}



