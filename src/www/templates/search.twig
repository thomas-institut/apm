{% extends "base.twig" %}

{% block title %}Search{% endblock %}

{% block extraCSS%}
<style>
    div#search_form {
        margin-bottom: 1rem;
        margin-top: 2rem;
    }

    div#search_results {
        margin-bottom: 2rem;
        margin-left: 2rem;
    }
</style>
{% endblock%}

{% block finalBodyJS %}
    <script>
      $(() => {

        // Get selectors of the searchBox and the searchResults container
        let searchBox = $("#searchBox")
        let searchResultsDiv = $("#search_results")

        // Key-Up function
        searchBox.on("keyup", () => {

          // Get user input
          let searchText = searchBox.val()
          // Send user input to ApiSearch (via routing in index.php) and print returned matches
          $.post( "{{url_for('search.keyword')}}", {searchText: searchText})
            .done( (apiResponse) => {
              console.log(apiResponse)

              let numMatches = apiResponse['matches'].length

              // If there are no matches, display this to the user
              if (numMatches === 0) {
                searchResultsDiv
                  .html(`'Nothing found for ${apiResponse['searchString']}'<br/> Server time: ${apiResponse['serverTime']}`)
                  .addClass('text-warning')
              }

              // If there is exactly one match, display the title, the page and the transcriber of the matched document
              else if (numMatches === 1) {

                // Collect relevant Data from API response
                let title = apiResponse['matches'][0]['title']
                let page = apiResponse['matches'][0]['page']
                let column = apiResponse['matches'][0]['column']
                let transcriber = apiResponse['matches'][0]['transcriber']
                let matchedKeyword = apiResponse['matches'][0]['matchedKeyword']
                let keywordInContext = apiResponse['matches'][0]['keywordInContext']
                let keyword = apiResponse['searchString']
                let time = apiResponse['serverTime']

                let results = (title + ", " +
                    "Page " + page + ", " +
                    "Column " + column + ", " +
                    "transcribed by " + transcriber).italics() + "<br/>" +
                  makeKeywordbold(keywordInContext, matchedKeyword)

                // Display results
                searchResultsDiv
                  .html(`<b>${numMatches} match found for '${keyword}':</b> <br/><br/> ${results} <br/><br/>  (${time})`)
                  .removeClass('text-warning')
              }

              // If there is more than one match, display them all like above
              else {

                let results = ''
                let keyword = apiResponse['searchString']
                let time = apiResponse['serverTime']

                // Write all matches into a string
                for (let i = 0; i < numMatches; i++) {

                  // Collect relevant Data from API response
                  let title = apiResponse['matches'][i]['title']
                  let page = apiResponse['matches'][i]['page']
                  let column = apiResponse['matches'][i]['column']
                  let transcriber = apiResponse['matches'][i]['transcriber']
                  let matchedKeyword = apiResponse['matches'][i]['matchedKeyword']
                  let keywordInContext = apiResponse['matches'][i]['keywordInContext']
                  let keyword = apiResponse['searchString']

                  results = results + '<br/>' +
                    (title + ", " + 'page ' + page + ", " + 'column ' + column + ", " + 'transcribed by ' + transcriber + '<br/>').italics() +
                    makeKeywordbold(keywordInContext, matchedKeyword) + '<br/>'
                }

                // Display results
                searchResultsDiv
                  .html(`<b>${numMatches} matches found for '${keyword}':</b><br/> ${results} <br/><br/> (${time})`)
                  .removeClass('text-warning')
              }
              // If something went wrong, i. e. the OpenSearch server is down, display an error message
          }).fail( (status) => {
            console.log(status)
            searchResultsDiv
              .html('Search is currently not available. Please try again later.')
              .removeClass('text-error')

          })
        })
      })

      // Function to highlight the searched keyword in its context
      function makeKeywordbold (text, keyword) {

          let keywordLen = keyword.length
          let pos = text.indexOf(keyword)
          let boldKeyword = keyword.bold()
          let newText = text.slice(0, pos) + boldKeyword + text.slice(pos + keywordLen, text.length)

          return newText
        }
    </script>
{%  endblock %}

{% block content %}
    <h1> Search </h1>
    <div id="search_form">
        <label for="searchBox">Text to search:</label> <input type="text" id="searchBox" placeholder="Enter text here" value="">
    </div>
    <div id="search_results"></div>

{% endblock %}



